{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","new_squares","length","calculateWinner","setState","concat","window","alert","step","status","current","winner","moves","map","move","desc","class","jumpTo","style","display","justifyContent","alignItems","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a680eef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// A function that is being used as the squares on the board\r\nfunction Square(props) {\r\n    // when calling the Square function the caller sends properties and get a square with the property back \r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  // A class named Board, which is responsible for the board and creating squares\r\n  class Board extends React.Component {\r\n    // a renderSquare function which receives i (the index of the square)\r\n    // the function creates a square (by using the Square function) which has 2 values: it's value and onClick method \r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    // Render function that creates squares no. 0-8  \r\n    render() {\r\n      return (\r\n        // the render function creates a div and creates three seperated divs inside of it, each inner div includes three squares (0-2),(3-5),(6-8)\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // A class named Game, which is responsible for the entire game\r\n  class Game extends React.Component {\r\n      // going through ctor(props) and super ctor of props\r\n    constructor(props) {\r\n      super(props);\r\n      // creating an element named state which has three attributes: history array filled with 9 arrays, stepNumber which tells us in which step are we.\r\n      // xIsNext is a boolean varialbe which tells us if the turn belongs to X or O.\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(9).fill(null)\r\n          }\r\n        ],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n      };\r\n    }\r\n    // handleClick function: creates three elements (history ,current,squares)\r\n    handleClick(i) {\r\n        // we are using the slice method for history to make sure that if we \"go back in time\" and then make a new move from that point we throw away all the \"future history\"\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1); \r\n      const current = history[history.length - 1]; \r\n      // takes the \"state\" in which the squares are in at the moment\r\n      const new_squares = current.squares.slice();\r\n\r\n      // checking if the winner has been annouced or that the the current square that has been clicked is already taken\r\n      if(calculateWinner(new_squares) != null)\r\n      {\r\n        window.alert(\"Hey, the game is OVER and there is clearly a winner..\");\r\n        return; \r\n      }\r\n      if (new_squares[i] != null) {         \r\n        window.alert(\"Hey, this row is taken\");\r\n        return; \r\n      }\r\n      // otherwise, new_squares[i] will be equal to X or O according to the variable xIsNext\r\n      new_squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      // we will set the new state, we will copy the new_squares into the old squares\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: new_squares\r\n          }\r\n        ]),\r\n        // the number of the step will now be equal to the history.length\r\n        stepNumber: history.length,\r\n        // xIsNext will change (if X was used then Y , if Y was used then X using the ! operator)\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n  \r\n    // A function in which helps us to jump to the current game history\r\n    jumpTo(step) {\r\n      this.setState({ \r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0 // if step%2 is 0 it means that x is the one that was played which means boolean value true will be in xIsNext else, false value will be in xIsNext\r\n      });\r\n    }\r\n    \r\n    // the render function of game class\r\n    render() {\r\n\r\n        // assign 3 varialbes (history, current, winner)\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares); // checks if a winner has been chosen.\r\n    \r\n      // creates the Go to move menu and allows the user to click on a cretin move and \"go back in time\"\r\n      const moves = history.map((step, move) => { // map helps us map between the step and the move.\r\n        const desc = move ?  \r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n          // in the beggining only the \"Go to game start\" is being presented to the user, later on after everyturn the \"Go to move #\" + the movenumber is presented\r\n        return (\r\n            // create a button with the jump to move onClick and the string presented from desc.\r\n          <li key={move}>\r\n            <button class=\"btn btn-primary\" onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n      \r\n      // status can be Winner + (X OR O) or Next Player: + (X OR O) according to winner variable \r\n      let status;\r\n      if (winner != null) {\r\n        status = \"Winner: \" + winner;\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n\r\n      // the render function returns the Board of the game which consist of two variables: status(which is the message that needs to be presented) and onClick function from game class\r\n      return (\r\n        <div className=\"game\" style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}>\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={i => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n  \r\n  //   Given an array of 9 squares, this function will check for a winner and return 'X', 'O', or null as appropriate.  function calculateWinner(squares) {\r\n  function calculateWinner(squares) {\r\n    \r\n    // One of those is the winner in the game\r\n    const lines = [\r\n      [0, 1, 2], \r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  "],"sourceRoot":""}